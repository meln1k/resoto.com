"use strict";(self.webpackChunkresoto_com=self.webpackChunkresoto_com||[]).push([[3886],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=m(n),u=a,f=d["".concat(p,".").concat(u)]||d[u]||c[u]||l;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var m=2;m<l;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5266:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return s},default:function(){return d}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),o=["components"],i={},p="format",m={unversionedId:"reference/cli/format",id:"reference/cli/format",title:"format",description:"The format command creates a string from the JSON input based on the provided format string.",source:"@site/docs/reference/cli/format.md",sourceDirName:"reference/cli",slug:"/reference/cli/format",permalink:"/docs/reference/cli/format",editUrl:"https://github.com/someengineering/resoto.com/edit/main/docs/reference/cli/format.md",tags:[],version:"current",lastUpdatedAt:1643574146,formattedLastUpdatedAt:"1/30/2022",frontMatter:{},sidebar:"sidebar",previous:{title:"flatten",permalink:"/docs/reference/cli/flatten"},next:{title:"head",permalink:"/docs/reference/cli/head"}},s=[{value:"Usage",id:"usage",children:[{value:"Options",id:"options",children:[],level:3},{value:"Parameters",id:"parameters",children:[],level:3}],level:2},{value:"Examples",id:"examples",children:[],level:2},{value:"See Also",id:"see-also",children:[],level:2}],c={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"format"},(0,l.kt)("inlineCode",{parentName:"h1"},"format")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"format")," command creates a string from the JSON input based on the provided format string."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"format [--<format-option>] <format_string>\n")),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"format")," command supports some predefined formats, which can be utilized using the following options:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--json")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a JSON string and returns it within a JSON array.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--ndjson")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a JSON object for each element, with line element per line in the output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--text")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a text representation of each element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--cytoscape")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a string representation in ",(0,l.kt)("a",{parentName:"td",href:"https://js.cytoscape.org/#notation/elements-json"},"Cytoscape.js format"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--graphml")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a string representation in ",(0,l.kt)("a",{parentName:"td",href:"http://graphml.graphdrawing.org"},"GraphML format"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"--dot")),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a string representation in ",(0,l.kt)("a",{parentName:"td",href:"https://graphviz.org/doc/info/lang.html"},"Graphviz DOT format"))))),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,"Alternatively, a custom format string may be provided to the command:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required?"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"format_string")),(0,l.kt)("td",{parentName:"tr",align:null},"Format string ","*"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{parentName:"td",role:"img","aria-label":"cross mark"},"\u274c")),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")))),(0,l.kt)("p",null,"*"," The format string may contain placeholders in curly braces that access properties of the JSON object. If a property is not available, it will result in the string ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,"This first example has a result of ",(0,l.kt)("inlineCode",{parentName:"p"},'[ "b!=d" ]'),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$> json {"a":"b", "b": {"c":"d"}} | format {a}!={b.c}\n')),(0,l.kt)("p",null,"The result of the next command is ",(0,l.kt)("inlineCode",{parentName:"p"},'[ "only select >2<" ]'),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$> json {"b": {"c":[0,1,2,3]}} | format only select >{b.c[2]}<\n')),(0,l.kt)("p",null,"The following command results in ",(0,l.kt)("inlineCode",{parentName:"p"},'[ "only select >2<" ]'),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$> json {"b": {"c":[0,1,2,3]}} | format only select >{b.c[2]}<\n')),(0,l.kt)("p",null,"And the below example has a result of ",(0,l.kt)("inlineCode",{parentName:"p"},'[ "null:null:null" ]'),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$> json {} | format {a}:{b.c.d}:{foo.bla[23].test}\n")),(0,l.kt)("p",null,"This command writes the result of ",(0,l.kt)("inlineCode",{parentName:"p"},"query all")," in JSON format to a file named ",(0,l.kt)("inlineCode",{parentName:"p"},"out.json"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$> query all | format --json | write out.json\n")),(0,l.kt)("h2",{id:"see-also"},"See Also"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/reference/cli/dump"},(0,l.kt)("inlineCode",{parentName:"a"},"dump")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/cli/list"},(0,l.kt)("inlineCode",{parentName:"a"},"list")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/cli/jq"},(0,l.kt)("inlineCode",{parentName:"a"},"jq"))))}d.isMDXComponent=!0}}]);